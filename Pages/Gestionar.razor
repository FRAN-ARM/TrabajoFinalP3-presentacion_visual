@page "/Gestionar"
@inject HttpClient Http
<link rel="stylesheet" href="css/style_buscador_a.css">
<link rel="stylesheet" href="css/style_tablas.css">

<div class="ml-4 mt-1 mb-3"style="visibility: hidden;">
  <button type="button" class="btn btn-info btn-sm" @onclick="@(() => CambiarTitulo(1))">Libro</button>
  <button type="button" class="btn btn-info btn-sm" @onclick="@(() => CambiarTitulo(2))">Cliente</button>
  <button type="button" class="btn btn-info btn-sm" @onclick="@(() => CambiarTitulo(3))">Autor</button>
  <button type="button" class="btn btn-info btn-sm" @onclick="@(() => CambiarTitulo(4))">Préstamo</button>
  <button type="button" class="btn btn-info btn-sm" @onclick="@(() => CambiarTitulo(5))">Categoría</button>
  <button type="button" class="btn btn-info btn-sm" @onclick="@(() => CambiarTitulo(6))">Editorial</button>
</div>
<div class="container m-0 p-0" style="visibility: hidden;">
  <div class="form d-flex justify-content-start">
    <button type="button" class="btn btn-primary d-flex justify-content-center align-items-center" style="width: 4rem;border-top-right-radius: 0; border-bottom-right-radius: 0;">
      <img src="/images/icon_Search.svg" class="image-fluid" alt="">
    </button>
    <input type="text" class="form-search form-input" placeholder="Buscar..." style="border-top-left-radius: 0; border-bottom-left-radius: 0;">
  </div>
</div>
@if (Fs == null)
{
  <p><em>Cargando...</em></p>
}
else
{
  <div class="container m-0 p-3 mt-5" style="background-color: #6586ad; border-radius: 0.5rem; max-width: 100%;">
    <h4 class="text-center text-light">
      <strong>@Titulo</strong> </h4>
    <div class="container bg-light m-0 p-0" style="border-radius: 0.3rem; max-width: 100%; height: auto; overflow-y: scroll;">
      <table class="table">
        <thead class="thead" style="background-color: transparent;">
          <tr>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Libro Nombre</th>
            <th>Estado</th>
            <th>Matricula</th>
            <th>Fecha Préstamo</th> <th>Fecha Entrega</th>
            <th></th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          @for (int i = 0 + PaginacionAreaMultiplicador; (i < PaginacionAreaMultiplicador + PaginacionBotonesPorPagina); i++)
          {
            try
            {
              var forecast = Fs[i];
              var _estado_style = "font-size: .875rem; color: var(--color-texto); border-radius: 0.2rem; background-color: ";
              switch (forecast.Estado)
              {
                  case "Reservado":
                      _estado_style += "var(--color-amarillo-o);";
                      break;
                  case "Devuelto":
                      _estado_style += "var(--color-verde-o);";
                      break;
                  case "Prestado":
                      _estado_style += "var(--color-rojo);";
                      break;
              }
              <tr>
                <td>@forecast.Nombre</td>
                <td>@forecast.Apellido</td>
                <td>@forecast.LibroNombre</td>
                <td>
                  <div class="text-center" style=@_estado_style>@forecast.Estado</div>
                </td>
                <td>@forecast.Matricula</td>
                <td>@forecast.FrechaPrestamo.ToString("dd/MM/yyyy")</td>  
                <td>@forecast.FechaEntrega.ToString("dd/MM/yyyy")</td>  
                <td>
                  <button type="button" class="btn btn-info btn-sm m-0 p-0" style="width: 24px; height: 24px;"><img src="/images/tablas/icon_Modificar.svg" alt=""></button>
                </td>
                <td>
                  <button type="button" class="btn btn-danger btn-sm m-0 p-0" style="width: 24px; height: 24px;"><img src="/images/tablas/icon_Eliminar.svg" alt=""></button>
                </td>
              </tr>
            }
            catch
            {
              <tr>
                <td>-</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>  
                <td></td>  
                <td>
                </td>
                <td>
                </td>
              </tr>
            }
          }
        </tbody>
      </table>
      <nav aria-label="Page navigation example" style="padding-bottom: 1rem;">
        <ul class="pagination justify-content-center">
          @{
            var _class_anterior = "page-item " + (PaginacionArea == 1 ? "disabled" : "");
            var _class_siguiente = "page-item " + (PaginacionArea == PaginacionBotones ? "disabled" : "");
            <li class=@_class_anterior>
              <button class="page-link" @onclick="@(() => mthPaginacionCambiar(1))">Primero</button>
            </li>
            <li class=@_class_anterior>
              <button class="page-link" @onclick="@(() => mthPaginacionCambiar(PaginacionArea - 1))">Anterior</button>
            </li>
            @for (int i = 0; (i < 5 && i != FsLenght); i++)
            {
              var _pags = PaginacionArea + 1 * i;
              //if (_pags <= PaginacionBotones)
              {
                var _class_cambiar = (_pags == PaginacionArea || _pags > PaginacionBotones) ? "page-item disabled" : "page-item";
                <li class=@_class_cambiar><button class="page-link" @onclick="@(() => mthPaginacionCambiar(_pags))">@_pags</button></li>
              }
            }
            <li class=@_class_siguiente>
              <button class="page-link" @onclick="@(() => mthPaginacionCambiar(PaginacionArea + 1))">Siguiente</button>
            </li>
            <li class=@_class_siguiente>
              <button class="page-link" @onclick="@(() => mthPaginacionCambiar(PaginacionBotones))">Último</button>
            </li>
          }
        </ul>
      </nav>
    </div>
  </div>
}

@code {
  private WeatherForecast[]? Fs;
  private string Titulo = "Nombre libro"; // Título inicial
  // Paginacion - EXPERIMENTAL
  private int PaginacionArea = 1;
  private int PaginacionAreaMultiplicador = 0;
  private int PaginacionBotones = 0;
  private int PaginacionBotonesPorPagina = 8;
  private int FsLenght = 0;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      Fs = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/DataGestionar.json");
    }
    finally
    {
      mthFsSetLenght();
      mthPaginacionBotonesActualizar();
      mthPaginacionCambiar(1);
    }
  }

  public class WeatherForecast
  {
    public string? Nombre { get; set; }
    public string? Apellido { get; set; }
    public string? LibroNombre { get; set; }
    public string? Estado { get; set; }
    public int Matricula { get; set; }
    public DateOnly FrechaPrestamo { get; set; }
    public DateOnly FechaEntrega { get; set; }
  }

  private void CambiarTitulo(int NumeroTitulo)
  {
    switch (NumeroTitulo)
    {
      case 1:
        Titulo = "Nombre libro";
        break;
      case 2:
        Titulo = "Nombre Cliente";
        break;
      case 3:
        Titulo = "Nombre Autor";
        break;
      case 4:
        Titulo = "Nombre Prestamo (ID)";
        break;
      case 5:
        Titulo = "Nombre Categoria";
        break;
      case 6:
        Titulo = "Nombre Editorial";
        break;
    }
  }

  private void mthPaginacionCambiar(int _num) {
    PaginacionArea = _num;
    PaginacionAreaMultiplicador = PaginacionBotonesPorPagina * (PaginacionArea - 1);
  }
  private void mthPaginacionBotonesActualizar()
  {
    PaginacionBotones = (int) Math.Ceiling((double) Fs.Length / PaginacionBotonesPorPagina);
  }
  private void mthFsSetLenght()
  {
    FsLenght = Fs.Length;
  }
}
