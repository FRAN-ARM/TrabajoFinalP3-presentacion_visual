@inject HttpClient Http
@using Blazored.SessionStorage;
@inject NavigationManager NavigationManager
@inject ISessionStorageService sessionStorage
@using Pages
@if (Pr == null)
{
  <p><em>Cargando...</em></p>
}
else
{
  <div class="container m-0 p-3 mt-5" style="background-color: #689d6d; border-radius: 0.5rem;">
    <h3 class="text-center text-light">
      <strong>@Filtros.Titulo</strong>
    </h3>
    <div style="border-radius: 0.3rem; height: 500px; overflow-y: scroll;" class="container bg-light m-0 p-0">
      <table class="table">
        <thead class="thead" style="background-color: transparent;">
          <tr>
            <th>Fecha de Préstamo</th>
            <th>Fecha de Entrega</th>
            <th>Estado</th>
            <th>Cliente</th>
            <th>Libro</th>
            <th></th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          @foreach (var forecast in Pr)
          {
                if (forecast.id == Filtros.Busqueda || forecast.libro == Filtros.Busqueda || forecast.estado == Filtros.Busqueda || forecast.cliente == Filtros.Busqueda)
            {
                fondo = "background-color: darkgray;";
            }
            else { fondo = ""; }
            <tr style="@fondo" >
              <td>@forecast.fecha_prestamo</td>
              <td>@forecast.fecha_entrega</td>
              <td>@forecast.estado</td>
              <td>@forecast.cliente</td>
              <td>@forecast.libro</td>
              <td>
                  <button type="button" class="btn btn-info btn-sm" @onclick="() => EditarPrestamo(forecast.id)">Editar</button>
              </td>
              <td>
                <button type="button" class="btn btn-danger btn-sm" @onclick="() => EliminarPrestamo(forecast.id)">Eliminar</button>
              </td>
            </tr>
          }
        </tbody>
      </table>
    </div>
  </div>
}


@code {
  string fondo = "";
    private Prestamo[]? Pr;
  private string Titulo = "Fecha Prestamos";
  protected override async Task OnInitializedAsync()
  {
        Pr = await Http.GetFromJsonAsync<Prestamo[]>("https://localhost:7268/api/Prestamo");
  }

    public async Task EliminarPrestamo(string id)
    {
        try
        {
            HttpResponseMessage response = await Http.DeleteAsync($"https://localhost:7268/api/Prestamo/{id}");
            response.EnsureSuccessStatusCode();

            // Eliminación exitosa, recargar la lista de editoriales
            Pr = await Http.GetFromJsonAsync<Prestamo[]>("https://localhost:7268/api/Prestamo");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error al eliminar el editorial: {e.Message}");
        }
    }




    private async Task EditarPrestamo(string PrestamoId)
    {

        await sessionStorage.SetItemAsync("PrestamoId", PrestamoId);


        NavigationManager.NavigateTo($"/PanelEditarPrestamo");

    }

  public class Prestamo
  {
    public string? id { get; set; }
    public string? fecha_prestamo { get; set; }
    public string? fecha_entrega { get; set; }
    public string? estado { get; set; }
    public string? cliente { get; set; }
    public string? libro { get; set; }
  
  }

}
