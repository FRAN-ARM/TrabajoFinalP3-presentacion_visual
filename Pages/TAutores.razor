@inject HttpClient Http
@using Blazored.SessionStorage;
@inject NavigationManager NavigationManager
@inject ISessionStorageService sessionStorage
@using Pages
@if (Au == null)
{
  <p><em>Loading...</em></p>
}else{
  <div class="container m-0 p-3 mt-5" style="background-color: #825550; border-radius: 0.5rem;">
    <h3 class="text-center text-light">
      <strong>@Filtros.Titulo</strong>
      </h3>
    <div style="border-radius: 0.3rem; height: 500px; overflow-y: scroll;" class="container bg-light m-0 p-0">
      <table class="table">
        <thead class="thead" style="background-color: transparent;">
          <tr>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Pais</th>
            <th>Descripción</th>
            <th></th>
            <th></th>
            </tr>
        </thead>
        <tbody>
         @foreach (var forecast in Au)
          {
            if (forecast.id == Filtros.Busqueda || forecast.nombre == Filtros.Busqueda || forecast.apellido == Filtros.Busqueda || forecast.pais == Filtros.Busqueda || forecast.descripcion == Filtros.Busqueda)
            {
                fondo = "background-color: darkgray;";
            }
            else { fondo = ""; }
            <tr style="@fondo">
              <td>@forecast.nombre</td>
              <td>@forecast.apellido</td>
              <td>@forecast.pais</td>
              <td>@forecast.descripcion</td>
              <td>
                <button type="button" class="btn btn-info btn-sm" @onclick="() => EditarAutor(forecast.id)">Editar</button>
              </td>
              <td>
                 <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => EliminarAutor(forecast.id))">Eliminar</button>
              </td>
            </tr>
          }
        </tbody>
      </table>
    </div>
  </div>
}

@code {
  string fondo = "";
  private Autor[]? Au;
  Gestionar GG = new Gestionar();
  private string TituloL = "Nombre libro";

  protected override async Task OnInitializedAsync()
  {
    Au = await Http.GetFromJsonAsync<Autor[]>("https://localhost:7268/api/Autores");
  }

    public async Task EliminarAutor(string id)
{
    try
    {
            HttpResponseMessage response = await Http.DeleteAsync($"https://localhost:7268/api/Autores/{id}");
        response.EnsureSuccessStatusCode();

        // Eliminación exitosa, recargar la lista de editoriales
            Au = await Http.GetFromJsonAsync<Autor[]>("https://localhost:7268/api/Autores");
    }
    catch (Exception e)
    {
        Console.WriteLine($"Error al eliminar el autor: {e.Message}");
    }
}

   

 
    private async Task EditarAutor(string AutorId)
{
       
        await sessionStorage.SetItemAsync("AutorId", AutorId);
      
        
        NavigationManager.NavigateTo($"/PanelEditarAutor");
        
}

  public class Autor
  {
    public string? id { get; set; }
    public string? nombre { get; set; }
    public string? apellido { get; set; }
    public string? pais { get; set; }
    public string? descripcion { get; set; }
  }
}
